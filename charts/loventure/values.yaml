global:
  imageRegistry: docker.io/pitterpetter
  imagePullPolicy: IfNotPresent
  namespace: loventure-app
  environment: production
# Gateway Service Configuration
gateway:
  replicaCount: 1
  service:
    type: ClusterIP
    port: 8080
  deployment:
    image:
      repository: gateway
      tag: "98c3961"
      pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  # Additional required settings for gateway subchart
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automountServiceAccountToken: true
  podAnnotations: {}
  podSecurityContext:
    fsGroup: 2000
  securityContext:
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1000
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # Gateway Ingress Configuration
  ingress:
    enabled: true
    staticIpName: "pitterpetter-gateway-ip"
    managedCertificate: "pitterpetter-ssl"
    sslRedirect: true
    hosts:
      - host: "api.loventure.us"
        paths:
          - path: "/api"
            pathType: "Prefix"
          - path: "/health"
            pathType: "Prefix"
          - path: "/actuator"
            pathType: "Prefix"
          - path: "/oauth2"
            pathType: "Prefix"
          - path: "/login/oauth2"
            pathType: "Prefix"
          - path: "/login/oauth2/code"
            pathType: "Prefix"
          - path: "/logout"
            pathType: "Prefix"
    tls:
      enabled: true
      secretName: "pitterpetter-ssl"
      hosts:
        - "api.loventure.us"
    cors:
      enabled: true
      allowOrigin: "http://localhost:5173, https://api.loventure.us, https://loventure.us"
      allowMethods: "GET,POST,PUT,DELETE,OPTIONS"
      allowHeaders: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    # Rate Limiting
    rateLimit:
      enabled: true
      requests: 100
      window: "1m"
  # JWT Secret for Gateway Service
  jwtSecret: "" # Set via ArgoCD UI: gateway.jwtSecret
# Auth Service Configuration
auth-service:
  service:
    name: auth-service
    type: ClusterIP
    port: 8081
    targetPort: 8081
  deployment:
    replicaCount: 1
    image:
      repository: auth-service
      tag: "ce76dde"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      - name: SERVER_PORT
        value: "8081"
  postgres:
    enabled: true
    image:
      registry: docker.io
      repository: postgres
      tag: "14"
    service:
      port: 5432
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
      accessMode: ReadWriteOnce
    auth:
      postgresPassword: "" # Set via ArgoCD UI: auth-service.postgres.auth.postgresPassword
      database: "auth"
      username: "root"
# Content Service Configuration
content-service:
  service:
    name: content-service
    type: ClusterIP
    port: 8082
    targetPort: 8082
  deployment:
    replicaCount: 1
    image:
      repository: content-service
      tag: "5bc47a1"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      - name: SERVER_PORT
        value: "8082"
  postgres:
    enabled: true
    image:
      registry: docker.io
      repository: postgres
      tag: "14"
    service:
      port: 5432
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
      accessMode: ReadWriteOnce
    auth:
      postgresPassword: "" # Set via ArgoCD UI: content-service.postgres.auth.postgresPassword
      database: "content"
      username: "root"
# Course Service Configuration
course-service:
  service:
    name: course-service
    type: ClusterIP
    port: 8083
    targetPort: 8083
  deployment:
    replicaCount: 1
    image:
      repository: course-service
      tag: "bfc68e6"
      pullPolicy: IfNotPresent
    env:
      - name: SERVER_PORT
        value: "8083"
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  postgres:
    enabled: true
    image:
      registry: docker.io
      repository: postgres
      tag: "14"
    service:
      port: 5432
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
      accessMode: ReadWriteOnce
    auth:
      postgresPassword: "" # Set via ArgoCD UI: course-service.postgres.auth.postgresPassword
      database: "course"
      username: "root"
# Redis Configuration
redis:
  enabled: true
  service:
    name: redis
    type: ClusterIP
    port: 6379
    targetPort: 6379
  deployment:
    replicaCount: 1
    image:
      repository: redis
      tag: "7-alpine"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    env:
      - name: REDIS_PASSWORD
        value: "" # 캐싱용이므로 비밀번호 없음
  persistence:
    enabled: false # 캐싱용이므로 영구 저장 불필요
  auth:
    enabled: false # 캐싱용이므로 인증 불필요
# AI Service Configuration
ai-service:
  service:
    name: ai-service
    type: ClusterIP
    port: 8000
    targetPort: 8000
  deployment:
    replicaCount: 1
    image:
      repository: ai-service
      tag: "312b54d"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    env:
      - name: ENVIRONMENT
        value: "production"
      - name: PORT
        value: "8000"
      - name: SECRET_KEY
        value: "" # Set via ArgoCD UI: ai-service.deployment.env[2].value
# Territory Service Configuration
territory-service:
  service:
    name: territory-service
    type: ClusterIP
    port: 8084
    targetPort: 8084
  deployment:
    replicaCount: 1
    image:
      repository: territory-service
      tag: "8615390"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      - name: SERVER_PORT
        value: "8084"
  postgres:
    enabled: true
    image:
      registry: docker.io
      repository: postgis/postgis
      tag: "14-3.4" # PostgreSQL 14 + PostGIS 3.4 (with GeoJSON support)
    service:
      port: 5432
    persistence:
      enabled: true
      size: 10Gi
      storageClass: ""
      accessMode: ReadWriteOnce
    auth:
      postgresPassword: "" # Set via ArgoCD UI: territory-service.postgres.auth.postgresPassword
      database: "territory"
      username: "root"
authService:
  deployment:
    image:
      tag: "1066640"
