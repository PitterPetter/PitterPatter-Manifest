global:
  imageRegistry: docker.io/pitterpetter
  imagePullPolicy: IfNotPresent
  namespace: loventure-app
  environment: production

# Gateway Configuration
gateway:
  service:
    name: gateway
    type: ClusterIP
    port: 8080
    targetPort: 8080
  deployment:
    replicaCount: 1
    image:
      repository: gateway
      tag: "7fdaaaa"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      - name: SERVER_PORT
        value: "8080"
  ingress:
    enabled: true
    staticIpName: "pitterpetter-gateway-ip"
    managedCertificate: "pitterpetter-ssl"
    sslRedirect: true
    hosts:
      - host: "api.loventure.us"
        paths:
          - path: "/api"
            pathType: "Prefix"
          - path: "/health"
            pathType: "Prefix"
          - path: "/actuator"
            pathType: "Prefix"
          - path: "/oauth2"
            pathType: "Prefix"
          - path: "/login/oauth2"
            pathType: "Prefix"
          - path: "/login/oauth2/code"
            pathType: "Prefix"
          - path: "/logout"
            pathType: "Prefix"
    tls:
      enabled: true
      secretName: "pitterpetter-ssl"
      hosts:
        - "api.loventure.us"
    cors:
      enabled: true
      allowOrigin: "http://localhost:5173, https://api.loventure.us, https://loventure.us"
      allowMethods: "GET,POST,PUT,DELETE,OPTIONS"
      allowHeaders: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    rateLimit:
      enabled: true
      requests: 100
      window: "1m"
  # JWT Secret for Gateway Service
  jwtSecret: "" # Set via ArgoCD UI: gateway.jwtSecret

# Auth Service Configuration
auth-service:
  service:
    name: auth-service
    type: ClusterIP
    port: 8081
    targetPort: 8081
  deployment:
    replicaCount: 1
    image:
      repository: auth-service
      tag: "ab5525f"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      - name: SERVER_PORT
        value: "8081"
      - name: SPRING_DATASOURCE_URL
        value: "" # Set via ArgoCD UI: auth-service.deployment.env[1].value
      - name: SPRING_DATASOURCE_USERNAME
        value: "" # Set via ArgoCD UI: auth-service.deployment.env[2].value
      - name: SPRING_DATASOURCE_PASSWORD
        value: "" # Set via ArgoCD UI: auth-service.deployment.env[3].value

# Content Service Configuration
content-service:
  service:
    name: content-service
    type: ClusterIP
    port: 8082
    targetPort: 8082
  deployment:
    replicaCount: 1
    image:
      repository: content-service
      tag: "8056f67"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      - name: SERVER_PORT
        value: "8082"
      - name: SPRING_DATASOURCE_URL
        value: "" # Set via ArgoCD UI: content-service.deployment.env[1].value
      - name: SPRING_DATASOURCE_USERNAME
        value: "" # Set via ArgoCD UI: content-service.deployment.env[2].value
      - name: SPRING_DATASOURCE_PASSWORD
        value: "" # Set via ArgoCD UI: content-service.deployment.env[3].value

# Course Service Configuration
course-service:
  service:
    name: course-service
    type: ClusterIP
    port: 8083
    targetPort: 8083
  deployment:
    replicaCount: 1
    image:
      repository: course-service
      tag: "8a235b8"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      - name: SERVER_PORT
        value: "8083"
      - name: SPRING_DATASOURCE_URL
        value: "" # Set via ArgoCD UI: course-service.deployment.env[1].value
      - name: SPRING_DATASOURCE_USERNAME
        value: "" # Set via ArgoCD UI: course-service.deployment.env[2].value
      - name: SPRING_DATASOURCE_PASSWORD
        value: "" # Set via ArgoCD UI: course-service.deployment.env[3].value

# Redis Configuration
redis:
  enabled: true
  service:
    name: redis
    type: ClusterIP
    port: 6379
    targetPort: 6379
  deployment:
    replicaCount: 1
    image:
      repository: redis
      tag: "7-alpine"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
    env:
      - name: REDIS_PASSWORD
        value: "" # 캐싱용이므로 비밀번호 없음
  persistence:
    enabled: false # 캐싱용이므로 영구 저장 불필요
  auth:
    enabled: false # 캐싱용이므로 인증 불필요

# AI Service Configuration
ai-service:
  service:
    name: ai-service
    type: ClusterIP
    port: 8000
    targetPort: 8000
  deployment:
    replicaCount: 1
    image:
      repository: ai-service
      tag: "5306fb7"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    env:
      - name: ENVIRONMENT
        value: "production"
      - name: PORT
        value: "8000"
      - name: SECRET_KEY
        value: "" # Set via ArgoCD UI: ai-service.deployment.env[2].value

# Territory Service Configuration
territory-service:
  service:
    name: territory-service
    type: ClusterIP
    port: 8084
    targetPort: 8084
  deployment:
    replicaCount: 1
    image:
      repository: territory-service
      tag: "8615390"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    env:
      - name: SERVER_PORT
        value: "8084"
      - name: SPRING_DATASOURCE_URL
        value: "" # Set via ArgoCD UI: territory-service.deployment.env[1].value
      - name: SPRING_DATASOURCE_USERNAME
        value: "" # Set via ArgoCD UI: territory-service.deployment.env[2].value
      - name: SPRING_DATASOURCE_PASSWORD
        value: "" # Set via ArgoCD UI: territory-service.deployment.env[3].value
